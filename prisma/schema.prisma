// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  BUSINESS
  ADMIN
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String     @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  role             UserRole   @default(USER)
  online           Boolean    @default(false)
  rating           Float      @default(0)
  businessId       String?
  accounts         Account[]
  sessions         Session[]
  businesses       Business[]
  products         Product[]
  bookmarks        Bookmark[]
  reviews          Review[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Authenticator Authenticator[]
  Rating        Rating[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Business {
  id          String  @id @default(cuid())
  name        String
  address     String?
  phone       String?
  imageUrl    String?
  description String?
  tagline     String?
  hours       String?
  website     String?
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  ratings   Rating[]
  products  Product[]
  reviews   Review[]
  Bookmark  Bookmark[]
}

model Bookmark {
  id         String    @id @default(cuid())
  productId  String?
  product    Product?  @relation(fields: [productId], references: [id])
  businessId String?
  business   Business? @relation(fields: [businessId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String
  businessId  String
  business    Business   @relation(fields: [businessId], references: [id])
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews     Review[]
  bookmarks   Bookmark[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Rating {
  id         String   @id @default(cuid())
  rating     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId])
}

model Review {
  id         String   @id @default(cuid())
  rating     Float
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  Product    Product? @relation(fields: [productId], references: [id])
  productId  String?
}

model Message {
  id         String   @id @default(cuid())
  content    String
  sentAt     DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   String
  receiverId String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}
